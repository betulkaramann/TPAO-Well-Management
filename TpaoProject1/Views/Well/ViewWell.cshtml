@using TpaoProject1.Model;
@{
    ViewData["Title"] = "ViewWell";
}
<head>
    <style>
        .gradient-formation {
            width: 300px; /* Adjust the width and height as needed */
            height: 200px;
            background: linear-gradient(to bottom, #ff0000, #00ff00); /* Adjust colors as needed */
        }

        table.styledTable {
            border: 0px solid #000000;
            background-color: #E0E0E0;
            text-align: center;
            justify-content: center;
            align-content: center;
        }

            table.styledTable td, table.styledTable th {
                border: 0px solid #AAAAAA;
                padding: 5px 5px;
                text-align: center;
            }

            table.styledTable thead {
                background: #B03610;
                background: -moz-linear-gradient(top, #c4684c 0%, #b84a28 66%, #B03610 100%);
                background: -webkit-linear-gradient(top, #c4684c 0%, #b84a28 66%, #B03610 100%);
                background: linear-gradient(to bottom, #c4684c 0%, #b84a28 66%, #B03610 100%);
                border-bottom: 3px solid #FFFFFF;
                text-align: center;
            }

                table.styledTable thead th {
                    font-size: 16px;
                    font-weight: bold;
                    color: #FFFFFF;
                    text-align: center;
                }
    </style>

    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
        google.charts.load("current", { packages: ["corechart"] });
        google.charts.setOnLoadCallback(drawChart);
        function drawChart() {
            var data = google.visualization.arrayToDataTable([
                ['Dinosaur', 'Length'],
                ['Acrocanthosaurus (top-spined lizard)', 12.2],
                ['Albertosaurus (Alberta lizard)', 9.1],
                ['Allosaurus (other lizard)', 12.2],
                ['Apatosaurus (deceptive lizard)', 22.9],
                ['Archaeopteryx (ancient wing)', 0.9],
                ['Argentinosaurus (Argentina lizard)', 36.6],
                ['Baryonyx (heavy claws)', 9.1],
                ['Brachiosaurus (arm lizard)', 30.5],
                ['Ceratosaurus (horned lizard)', 6.1],
                ['Coelophysis (hollow form)', 2.7],
                ['Compsognathus (elegant jaw)', 0.9],
                ['Deinonychus (terrible claw)', 2.7],
                ['Diplodocus (double beam)', 27.1],
                ['Dromicelomimus (emu mimic)', 3.4],
                ['Gallimimus (fowl mimic)', 5.5],
                ['Mamenchisaurus (Mamenchi lizard)', 21.0],
                ['Megalosaurus (big lizard)', 7.9],
                ['Microvenator (small hunter)', 1.2],
                ['Ornithomimus (bird mimic)', 4.6],
                ['Oviraptor (egg robber)', 1.5],
                ['Plateosaurus (flat lizard)', 7.9],
                ['Sauronithoides (narrow-clawed lizard)', 2.0],
                ['Seismosaurus (tremor lizard)', 45.7],
                ['Spinosaurus (spiny lizard)', 12.2],
                ['Supersaurus (super lizard)', 30.5],
                ['Tyrannosaurus (tyrant lizard)', 15.2],
                ['Ultrasaurus (ultra lizard)', 30.5],
                ['Velociraptor (swift robber)', 1.8]]);

            var options = {
                title: 'Lengths of dinosaurs, in meters',
                legend: { position: 'none' },
            };

            var chart = new google.visualization.Histogram(document.getElementById('chart_div'));
            chart.draw(data, options);
        }
    </script>

</head>
<h1>ViewWell</h1>
@model WellAndFormation

@if (Model != null)
{
    @if (TempData["status"] != null)
    {
        if (TempData["status"].ToString() == "true")
        {
            <div class="alert alert-secondary" role="alert">
                Formasyon başarıyla eklendi
            </div>
        }
    }
    @if (TempData["Error"] != null)
    {
        if (TempData["Error"].ToString() == "successful")
        {
            <div class="alert alert-secondary" role="alert">
                Formasyon başarıyla güncellendi
            </div>
        }
    }
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Name</th>
                <th scope="col">Latitude</th>
                <th scope="col">Longitude</th>
                <th scope="col">Operation</th>

            </tr>
        </thead>
        <tbody>

            <tr>
                <th scope="row">@Model.well.Id</th>
                <td>@Model.well.Name</td>
                <td>@Model.well.Latitude</td>
                <td>@Model.well.Longitude</td>
                <td><a asp-controller="ViewWelltops" asp-action="Delete" asp-route-id="@Model.well.Id"> Delete </a></td>
                <td><a asp-controller="Well" asp-action="AddFormation" asp-route-id="@Model.well.Id"> Add Formation </a></td>
            </tr>
        </tbody>
    </table>

    @if (Model.formation.Count() > 0)
    {
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th> Formation Type</th>
                    <th> Formation Meter</th>
                    <th scope="col">Operation</th>
                </tr>
            </thead>

            <tbody>

                @foreach (var item in Model.formation)
                {
                    //int a = ınt16.parse(item.form_type)
                    if (item.Form_type != null)
                    {
                        <tr>
                            <td>@item.Form_type.ToString()</td>
                            <td>-@item.Form_meter</td>
                            <td><a asp-controller="Well" asp-action="UpdateFormation" asp-route-id="@item.Id"> Update </a></td>
                            <td><a asp-controller="Well" asp-action="RemoveFormation" asp-route-id="@item.Id"> Delete </a></td>
                        </tr>
                    }
                }
            </tbody>
        </table>


        <div>
            @{
                int?[] formation_meters = new int? [30];
                int count = 0;
                <table class="styledTable">
                    <thead>
                        <tr>
                            <td>
                                Formasyon uzunluğu
                            </td>
                            <td>
                                Formasyon tipi
                            </td>
                            <td>
                                Formasyon görüntüsü
                            </td>
                            <td>
                                Formasyon derinliği
                            </td>

                        </tr>
                    </thead>
                    @{
                        var formation_count = 1;
                        formation_meters[0] = 0;
                        @foreach (var item in Model.formation)
                        {
                            formation_meters[formation_count] = item.Form_meter;
                            formation_count++;

                        }
                    }

                    @foreach (var item in Model.formation)
                    {
                        var meter = item.Form_meter;

                        var formation_deep = formation_meters[count+1]-formation_meters[count];
                        string color = Model.color.Where(x => x.Key == item.Form_type).ToList().First().Value;
                        var color2 = color + "80";

                        <tbody>
                            <tr>
                                <td>
                                    <p>@item.Form_meter </p>
                                </td>
                                <td>
                                    <div>
                                        <p>@item.Form_type</p>
                                    </div>
                                    @* //background: linear-gradient(to bottom, #ff0000, #00ff00)
                    @*background-color:@Model.color.Where(x => x.Key==item.Form_type).ToList().First().Value*@

                                </td>
                                <td>
                                    <p style=" height:@(formation_deep/ 8)px; background: linear-gradient(to bottom, @color, @color2  )">
                                    </p>
                                </td>
                                <td>
                                    <p>@formation_deep</p>
                                </td>
                            </tr>
                        </tbody>

                        count++;
                    }
                </table>

            }

            <div id="chart_div" style="width: 900px; height: 500px;"></div>

        </div>
    }
    else
    {
        <div>Gösterilecek formasyon bulunmamaktadır</div>
    }

}
