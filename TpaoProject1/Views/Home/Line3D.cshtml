<!DOCTYPE html>
<html>
<head>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
</head>
<body>
    <div id="plot"></div>
    <input type="file" id="excelFileInput" accept=".xls" />
    <input type="file" id="fileInput" accept=".json" />

    <script>
        function degreesToRadians(degrees) {
            return degrees * (Math.PI / 180);
        }

        var scatterData;
        var lineData;
        const plotDiv = document.getElementById('plot');

        // Excel data processing
        document.getElementById('excelFileInput').addEventListener('change', function (event) {
            var file = event.target.files[0];
            var reader = new FileReader();

            reader.onload = function (e) {
                var data = new Uint8Array(e.target.result);
                var workbook = XLSX.read(data, { type: 'array' });
                var sheetName = workbook.SheetNames[0];
                var sheet = workbook.Sheets[sheetName];
                var rows = XLSX.utils.sheet_to_json(sheet);
                var md = rows.map(row => parseFloat(row['MD[m]'].replace(',', '.')));
                var inc = rows.map(row => parseFloat(row['Inc[deg]'].replace(',', '.')));
                var azi = (rows.map(row => parseFloat(row['Azi[deg]'].replace(',', '.'))));
                var tvd = rows.map(row => parseFloat(row['TVD[m]'].replace(',', '.')));

                var pointsX = [];
                var pointsY = [];
                var pointsZ = [];
                var previousX = 655000;
                var previousY = 3895000;

                for (let i = 1; i < tvd.length; i++) {
                    azi[i] = degreesToRadians(azi[i]);
                    var tempTVD = tvd[i] - tvd[i - 1];
                    var tempMd = md[i] - md[i - 1];
                    var alpha = (Math.acos(tempTVD / tempMd));

                    var t = Math.sqrt(Math.pow(tempMd, 2) - Math.pow(tempTVD, 2))
                    var y = t * Math.sin(-azi[i] + (Math.PI / 2));
                    var x = t * Math.cos(-azi[i] + (Math.PI / 2));

                    pointsX.push(x + previousX);
                    pointsY.push(y + previousY);

                    previousX = pointsX[pointsX.length - 1];
                    previousY = pointsY[pointsY.length - 1];
                }

                for (let i = 1; i < tvd.length; i++) {
                    tvd[i] = tvd[i] * (-1);
                }

                // Creating the surface trace
                scatterData = {
                    type: 'scatter3d',
                    mode: 'markers+lines',
                    x: pointsX,
                    y: pointsY,
                    z: tvd,
                    marker: {
                        size: 4,
                        color: 'green',
                        colorscale: 'Greens',
                        cmin: -20,
                        cmax: 50,
                    },
                    line: {
                        color: 'blue',
                        colorscale: 'Viridis',
                        width: 6
                    }
                };

                updatePlotly();
            };

            reader.readAsArrayBuffer(file);
        });

        // JSON data processing
        document.getElementById('fileInput').addEventListener('change', function (event) {
            var file = event.target.files[0];
            var reader = new FileReader();

            reader.onload = function (event) {
                var jsonData = JSON.parse(event.target.result);

                const numRows = jsonData.bins[1]; 
                const numCols = jsonData.bins[0]; 
                const extent = jsonData.extent;
                const increment = jsonData.increment;


                const xValues = [];
                const yValues = [];
                const zValues = [];

                for (let i = 0; i < numCols; i++) {
                    xValues.push(642855 + 85 * i);
                }
                for (let i = 0; i < numRows; i++) {
                    yValues.push(3886795 + 85 * i);
                }

                for (let i = 0; i < numRows; i++) {
                    const row = [];
                    for (let j = 0; j < numCols; j++) {
                        const index = i * numCols + j;
                        var deneme = jsonData.points[index];
                        if (deneme != null) deneme = deneme * (-1);
                        if (deneme == null) {
                            row.push(NaN);
                        }
                        else {
                            row.push(deneme);

                        }

                    }
                    zValues.push(row);
                }


                lineData = {
                    type: 'surface',
                    x: xValues,
                    y: yValues,
                    z: zValues,
                    colorscale: 'YlGnBu'
                };

                updatePlotly();
            };

            reader.readAsText(file);
        });


        function updatePlotly() {
            if (scatterData && lineData) {
                var scatterLayout = {
                    scene: {
                        aspectmode: 'manual',
                        aspectratio: {
                            x: 1,
                            y: 1,
                            z: 1
                        },
                        xaxis: {
                            range: [642855, 661725],
                        },
                        yaxis: {
                            range: [3886795, 3905835],
                        },
                        zaxis: {
                            range: [-3000, 0],
                            autorange: 'false'
                        },

                    },
                    margin: {
                        t: 20,
                        b: 20,
                        l: 20,
                        r: 20
                    },
                    width: 900,
                    height: 600
                };


                var arrowN = {
                    type: 'cone',
                    x: [400],
                    y: [100],
                    z: [-2000],
                    u: [0],
                    v: [200],
                    w: [1],
                    colorscale: [[0, 'red'], [1, 'red']],
                    showscale: false,
                    sizemode: 'absolute',
                    anchor: 'tip',
                };
                var annotationN = {
                    x: 400,
                    y: 150,
                    z: -2000,
                    text: 'N',
                    showarrow: false,
                    font: {
                        size: 12,
                        color: 'red'
                    }
                };

                var lineLayout = {
                    title: 'Douleb',
                    scene: {
                        xaxis: { title: 'X Axis', },
                        yaxis: { title: 'Y Axis', },
                        zaxis: { title: 'Z Axis', },
                        aspectmode: 'manuel',
                        aspectratio: { x: 1, y: 1, z: 0.25 }

                    }
                };

                Plotly.newPlot('plot', [scatterData, lineData], scatterLayout);
                
            }
        }

    </script>
</body>
</html>
